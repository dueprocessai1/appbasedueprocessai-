
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { DocumentCollection, AnalyzedDocument, LegalCase } from "@/entities/all";
import { useToast } from "@/components/ui/use-toast";
import { 
  FolderOpen, 
  FileText, 
  Trash2, 
  Eye, 
  Download, 
  Calendar,
  Shield,
  Search,
  Plus,
  Loader2,
  Tag
} from 'lucide-react';
import { format } from 'date-fns';

export default function DocumentManager() {
    const [cases, setCases] = useState([]);
    const [selectedCase, setSelectedCase] = useState(null);
    const [collections, setCollections] = useState([]);
    const [selectedCollection, setSelectedCollection] = useState(null);
    const [documents, setDocuments] = useState([]);
    const [filteredDocuments, setFilteredDocuments] = useState([]);
    const [isLoading, setIsLoading] = useState(true); // Initial page loading state for cases
    const [isSubLoading, setIsSubLoading] = useState(false); // Loading state for collections/documents
    const [filterTag, setFilterTag] = useState(''); // New state for tag filtering
    const [searchQuery, setSearchQuery] = useState('');
    const { toast } = useToast();

    // Effect to load initial data (cases)
    useEffect(() => {
        loadInitialData();
    }, []);

    // Effect to load collections when selectedCase changes
    useEffect(() => {
        if (selectedCase) {
            loadCollectionsForCase(selectedCase.id);
        } else {
            setCollections([]);
            setSelectedCollection(null);
        }
    }, [selectedCase]);

    // Effect to load documents when selectedCollection changes
    useEffect(() => {
        if (selectedCollection) {
            loadDocuments(selectedCollection.id);
        } else {
            setDocuments([]);
        }
    }, [selectedCollection]);

    // Effect to filter documents whenever the raw documents, filter tag, or search query changes
    useEffect(() => {
        filterDocuments();
    }, [documents, filterTag, searchQuery]);

    const loadInitialData = async () => {
        setIsLoading(true);
        try {
            const casesData = await LegalCase.list("-created_date");
            setCases(casesData);
            if (casesData.length > 0) {
                // Automatically select the first case to load its collections
                setSelectedCase(casesData[0]);
            }
        } catch (error) {
            console.error("Error loading initial data (cases):", error);
            toast({
                title: "Error",
                description: "Failed to load legal cases.",
                variant: "destructive",
            });
        } finally {
            setIsLoading(false);
        }
    };
    
    const loadCollectionsForCase = async (caseId) => {
        if (!caseId) {
            setCollections([]);
            setSelectedCollection(null);
            return;
        }
        setIsSubLoading(true);
        setCollections([]); // Clear previous collections
        setSelectedCollection(null); // Clear selected collection
        try {
            const collectionsData = await DocumentCollection.filter({ case_id: caseId }, "-created_date");
            setCollections(collectionsData);
            if (collectionsData.length > 0) {
                // Automatically select the first collection
                setSelectedCollection(collectionsData[0]);
            }
        } catch (error) {
            console.error("Error loading collections:", error);
            toast({
                title: "Error",
                description: `Failed to load collections for case. ${error.message || ''}`,
                variant: "destructive",
            });
        } finally {
            setIsSubLoading(false);
        }
    };

    const loadDocuments = async (collectionId) => {
        if (!collectionId) {
            setDocuments([]); // Ensure documents are cleared if no collectionId
            return;
        }
        setIsSubLoading(true);
        setDocuments([]); // Clear previous documents while loading new ones
        try {
            const documentsData = await AnalyzedDocument.filter({ collection_id: collectionId }, "-created_date");
            setDocuments(documentsData);
        } catch (error) {
            console.error("Error loading documents:", error);
            toast({
                title: "Error",
                description: `Failed to load documents for collection. ${error.message || ''}`,
                variant: "destructive",
            });
        } finally {
            setIsSubLoading(false);
        }
    };

    const filterDocuments = () => {
        let filtered = documents;

        // Filter by search query (document name, summary, notes)
        if (searchQuery.trim()) {
            const query = searchQuery.toLowerCase();
            filtered = filtered.filter(doc => 
                doc.document_name.toLowerCase().includes(query) ||
                doc.analysis_summary?.toLowerCase().includes(query) ||
                doc.notes?.toLowerCase().includes(query)
            );
        }
        
        // Filter by tag
        if (filterTag.trim()) {
            const tagQuery = filterTag.toLowerCase();
            filtered = filtered.filter(doc => 
                doc.tags && doc.tags.some(tag => tag.toLowerCase().includes(tagQuery))
            );
        }

        setFilteredDocuments(filtered);
    };

    const deleteDocument = async (documentId, documentName) => {
        if (!confirm(`Are you sure you want to delete "${documentName}"? This action cannot be undone.`)) {
            return;
        }

        try {
            await AnalyzedDocument.delete(documentId);
            
            // Update collection document count in state and backend
            if (selectedCollection) {
                const updatedCount = Math.max((selectedCollection.document_count || 1) - 1, 0);
                await DocumentCollection.update(selectedCollection.id, {
                    document_count: updatedCount
                });
                // Update the collection list and selected collection state
                setCollections(prevCollections => 
                    prevCollections.map(c => 
                        c.id === selectedCollection.id ? { ...c, document_count: updatedCount } : c
                    )
                );
                setSelectedCollection(prevSelected => ({ ...prevSelected, document_count: updatedCount }));
            }
            
            await loadDocuments(selectedCollection?.id); // Reload documents for the current collection
            
            toast({
                title: "Document Deleted",
                description: `"${documentName}" has been permanently deleted.`,
            });
        } catch (error) {
            console.error("Error deleting document:", error);
            toast({
                title: "Delete Failed",
                description: "Failed to delete document. Please try again.",
                variant: "destructive",
            });
        }
    };

    const viewDocument = (fileUrl) => {
        window.open(fileUrl, '_blank');
    };

    const downloadDocument = (fileUrl, fileName) => {
        const link = document.createElement('a');
        link.href = fileUrl;
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    const getDocumentTypeColor = (type) => {
        const colors = {
            police_report: "bg-red-100 text-red-800",
            court_filing: "bg-blue-100 text-blue-800",
            evidence_photo: "bg-green-100 text-green-800",
            correspondence: "bg-purple-100 text-purple-800",
            witness_statement: "bg-orange-100 text-orange-800",
            legal_motion: "bg-slate-100 text-slate-800",
            discovery_response: "bg-teal-100 text-teal-800",
            other: "bg-gray-100 text-gray-800"
        };
        return colors[type] || colors.other;
    };

    const formatFileSize = (bytes) => {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    };

    return (
        <div className="p-6 space-y-8">
            <div className="max-w-7xl mx-auto">
                {/* Header */}
                <div className="mb-8">
                    <div className="flex items-center gap-3 mb-4">
                        <div className="w-12 h-12 bg-gradient-to-br from-slate-600 to-slate-700 rounded-xl flex items-center justify-center">
                            <FolderOpen className="w-7 h-7 text-white" />
                        </div>
                        <div>
                            <h1 className="text-3xl font-bold text-slate-900">Case Document Manager</h1>
                            <p className="text-slate-600 mt-1">Organize and manage evidence for your legal cases</p>
                        </div>
                    </div>
                </div>

                {/* Case and Collection Selection */}
                {isLoading ? (
                     <Card className="border-0 shadow-lg bg-white mb-6">
                        <CardContent className="p-6">
                            <div className="animate-pulse flex flex-col gap-4">
                                <div className="h-4 bg-slate-200 rounded w-1/4 mb-2"></div>
                                <div className="h-10 bg-slate-200 rounded"></div>
                                <div className="h-4 bg-slate-200 rounded w-1/4 mt-4 mb-2"></div>
                                <div className="h-10 bg-slate-200 rounded"></div>
                            </div>
                        </CardContent>
                    </Card>
                ) : (
                    <Card className="border-0 shadow-lg bg-white mb-6">
                        <CardHeader>
                            <CardTitle className="flex items-center justify-between">
                                <span>Select Case & Collection</span>
                                <Button size="sm" variant="outline" onClick={() => window.location.href = '/CreateCase'}>
                                    <Plus className="w-4 h-4 mr-2" />
                                    New Case
                                </Button>
                            </CardTitle>
                        </CardHeader>
                        <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div>
                                <label htmlFor="case-select" className="text-sm font-medium">Case</label>
                                <Select value={selectedCase?.id || ''} onValueChange={(id) => setSelectedCase(cases.find(c => c.id === id))} id="case-select">
                                    <SelectTrigger className="w-full">
                                        <SelectValue placeholder="Select a legal case" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {cases.length > 0 ? (
                                            cases.map(c => <SelectItem key={c.id} value={c.id}>{c.case_name}</SelectItem>)
                                        ) : (
                                            <SelectItem value="no-cases" disabled>No cases available</SelectItem>
                                        )}
                                    </SelectContent>
                                </Select>
                            </div>
                            <div>
                                <label htmlFor="collection-select" className="text-sm font-medium">Collection (File)</label>
                                <Select 
                                    value={selectedCollection?.id || ''} 
                                    onValueChange={(id) => setSelectedCollection(collections.find(c => c.id === id))} 
                                    disabled={!selectedCase || isSubLoading}
                                    id="collection-select"
                                >
                                    <SelectTrigger className="w-full">
                                        <SelectValue placeholder={!selectedCase ? "Select a case first" : (isSubLoading ? "Loading collections..." : "Select a collection")} />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {collections.length > 0 ? (
                                            collections.map(c => 
                                                <SelectItem key={c.id} value={c.id}>
                                                    {c.collection_name} ({c.document_count || 0} documents)
                                                </SelectItem>
                                            )
                                        ) : (
                                            <SelectItem value="no-collections" disabled>No collections for this case</SelectItem>
                                        )}
                                    </SelectContent>
                                </Select>
                            </div>
                        </CardContent>
                    </Card>
                )}

                {selectedCase && ( // Show filters and documents only if a case is selected
                    <>
                        {/* Filters and Search */}
                        <Card className="border-0 shadow-lg bg-white mb-6">
                            <CardContent className="p-4">
                                <div className="flex flex-col sm:flex-row gap-4">
                                    <div className="flex-1 relative">
                                        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4" />
                                        <Input
                                            placeholder="Search document names, summaries, or notes..."
                                            value={searchQuery}
                                            onChange={(e) => setSearchQuery(e.target.value)}
                                            className="pl-10"
                                        />
                                    </div>
                                    <div className="flex-1 relative">
                                        <Tag className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4" />
                                        <Input
                                            placeholder="Filter by tag..."
                                            value={filterTag}
                                            onChange={(e) => setFilterTag(e.target.value)}
                                            className="pl-10"
                                        />
                                    </div>
                                </div>
                            </CardContent>
                        </Card>

                        {/* Documents List */}
                        <div className="space-y-4">
                            {isSubLoading ? ( // Use isSubLoading here
                                <Card className="border-0 shadow-lg bg-white">
                                    <CardContent className="p-12 text-center flex flex-col items-center">
                                        <Loader2 className="w-8 h-8 text-slate-500 animate-spin mb-4" />
                                        <p className="text-slate-600">Loading documents...</p>
                                    </CardContent>
                                </Card>
                            ) : filteredDocuments.length === 0 ? (
                                <Card className="border-0 shadow-lg bg-white">
                                    <CardContent className="p-12 text-center">
                                        <FileText className="w-12 h-12 text-slate-400 mx-auto mb-4" />
                                        <h3 className="text-lg font-semibold text-slate-900 mb-2">No Documents Found</h3>
                                        <p className="text-slate-600 mb-4">
                                            {documents.length === 0 
                                                ? "This collection doesn't contain any documents yet." 
                                                : "No documents match your current filters."}
                                        </p>
                                        <Button onClick={() => window.location.href = '/DocumentAnalyzer'}>
                                            <Plus className="w-4 h-4 mr-2" />
                                            Add Documents
                                        </Button>
                                    </CardContent>
                                </Card>
                            ) : (
                                filteredDocuments.map((document) => (
                                    <Card key={document.id} className="border-0 shadow-lg bg-white hover:shadow-xl transition-shadow">
                                        <CardContent className="p-6">
                                            <div className="flex items-start justify-between">
                                                <div className="flex-1">
                                                    <div className="flex items-center gap-3 mb-2">
                                                        <FileText className="w-5 h-5 text-slate-600" />
                                                        <h3 className="font-semibold text-slate-900">{document.document_name}</h3>
                                                        <Badge className={getDocumentTypeColor(document.document_type)}>
                                                            {document.document_type.replace(/_/g, ' ')}
                                                        </Badge>
                                                    </div>
                                                    
                                                    {document.analysis_summary && (
                                                        <p className="text-sm text-slate-600 mb-3 line-clamp-2">
                                                            {document.analysis_summary}
                                                        </p>
                                                    )}

                                                    {/* Key Findings */}
                                                    {document.due_process_violations && document.due_process_violations.length > 0 && (
                                                        <div className="mb-3">
                                                            <div className="flex items-center gap-2 mb-2">
                                                                <Shield className="w-4 h-4 text-red-600" />
                                                                <span className="text-sm font-medium text-red-800">Due Process Violations Found:</span>
                                                            </div>
                                                            <div className="flex flex-wrap gap-1">
                                                                {document.due_process_violations.slice(0, 3).map((violation, index) => (
                                                                    <Badge key={index} variant="destructive" className="text-xs capitalize">
                                                                        {violation.replace(/_/g, ' ')}
                                                                    </Badge>
                                                                ))}
                                                                {document.due_process_violations.length > 3 && (
                                                                    <Badge variant="outline" className="text-xs">
                                                                        +{document.due_process_violations.length - 3} more
                                                                    </Badge>
                                                                )}
                                                            </div>
                                                        </div>
                                                    )}

                                                    {document.tags && document.tags.length > 0 && (
                                                        <div className="mt-3 flex flex-wrap gap-2">
                                                            {document.tags.map((tag, index) => (
                                                                <Badge key={index} variant="secondary" className="capitalize text-xs">{tag}</Badge>
                                                            ))}
                                                        </div>
                                                    )}

                                                    <div className="flex items-center gap-4 text-xs text-slate-500 mt-3">
                                                        <div className="flex items-center gap-1">
                                                            <Calendar className="w-3 h-3" />
                                                            {format(new Date(document.created_date), 'MMM d, yyyy')}
                                                        </div>
                                                        {document.file_size && (
                                                            <span>{formatFileSize(document.file_size)}</span>
                                                        )}
                                                        <span className="capitalize">{document.upload_method?.replace(/_/g, ' ')}</span>
                                                    </div>
                                                </div>

                                                <div className="flex items-center gap-2 ml-4">
                                                    <Button
                                                        size="sm"
                                                        variant="outline"
                                                        onClick={() => viewDocument(document.file_url)}
                                                        title="View Document"
                                                    >
                                                        <Eye className="w-4 h-4" />
                                                    </Button>
                                                    <Button
                                                        size="sm"
                                                        variant="outline"
                                                        onClick={() => downloadDocument(document.file_url, document.document_name)}
                                                        title="Download Document"
                                                    >
                                                        <Download className="w-4 h-4" />
                                                    </Button>
                                                    <Button
                                                        size="sm"
                                                        variant="outline"
                                                        onClick={() => deleteDocument(document.id, document.document_name)}
                                                        className="text-red-600 hover:text-red-700 hover:bg-red-50"
                                                        title="Delete Document"
                                                    >
                                                        <Trash2 className="w-4 h-4" />
                                                    </Button>
                                                </div>
                                            </div>
                                        </CardContent>
                                    </Card>
                                ))
                            )}
                        </div>
                    </>
                )}
            </div>
        </div>
    );
}