
import React, { useState, useEffect, useCallback } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Progress } from "@/components/ui/progress";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { ScanText, Upload, Loader2, FileText, FileImage, FileAudio, FileVideo, Archive, X, Plus, ChevronDown, FileSignature, CheckCircle, AlertTriangle, Crown, ExternalLink } from "lucide-react";
import { universalEvidenceProcessor } from "@/functions/universalEvidenceProcessor";
import { AnalyzedDocument, DocumentCollection, LegalCase } from "@/entities/all";
import { UploadFile } from "@/integrations/Core";
import SubscriptionGate from "../components/subscription/SubscriptionGate";
import { Link } from 'react-router-dom';
import { useToast } from "@/components/ui/use-toast";

const MAX_FILE_SIZE = 500 * 1024 * 1024; // 500MB general limit

const getFileCategory = (fileType) => {
    if (!fileType) return 'other';
    if (/pdf|msword|wordprocessingml|plain|csv|excel|spreadsheetml/.test(fileType)) return 'document';
    if (/image\//.test(fileType)) return 'image';
    if (/audio\//.test(fileType)) return 'audio';
    if (/video\//.test(fileType)) return 'video';
    if (/zip|rar|7z|tar/.test(fileType)) return 'archive';
    return 'other';
};

const FileIcon = ({ category }) => {
    switch (category) {
        case 'document': return <FileText className="w-5 h-5 text-blue-600" />;
        case 'image': return <FileImage className="w-5 h-5 text-teal-600" />;
        case 'audio': return <FileAudio className="w-5 h-5 text-purple-600" />;
        case 'video': return <FileVideo className="w-5 h-5 text-orange-600" />;
        case 'archive': return <Archive className="w-5 h-5 text-gray-600" />;
        default: return <FileText className="w-5 h-5 text-slate-500" />;
    }
};

export default function DocumentAnalyzer() {
    const [filesToProcess, setFilesToProcess] = useState([]);
    const [cases, setCases] = useState([]);
    const [collections, setCollections] = useState([]);
    const [selectedCase, setSelectedCase] = useState('');
    const [selectedCollection, setSelectedCollection] = useState('');
    const [notes, setNotes] = useState('');
    const [isProcessing, setIsProcessing] = useState(false);
    const [analysisResults, setAnalysisResults] = useState([]);
    const [isDragOver, setIsDragOver] = useState(false);
    const [platformError, setPlatformError] = useState(null);
    
    const { toast } = useToast();

    useEffect(() => {
        const loadInitialData = async () => {
            try {
                const [casesData, collectionsData] = await Promise.all([
                    LegalCase.list(), 
                    DocumentCollection.list()
                ]);
                setCases(casesData);
                setCollections(collectionsData);
            } catch (error) {
                console.error("Error loading initial data:", error);
                toast({
                    title: "Error loading data",
                    description: "Failed to load cases and collections.",
                    variant: "destructive"
                });
            }
        };
        loadInitialData();
    }, [toast]);

    const handleFiles = useCallback((files) => {
        const validFiles = files.filter(file => file.size <= MAX_FILE_SIZE);
        const newFiles = validFiles.map(file => ({
            id: `${file.name}-${file.size}-${Date.now()}`,
            file,
            status: 'queued',
            progress: 0,
            category: getFileCategory(file.type),
            error: null,
        }));
        setFilesToProcess(prev => [...prev, ...newFiles]);

        if (files.length > validFiles.length) {
            toast({
                title: "Files Skipped",
                description: `${files.length - validFiles.length} files were too large and rejected. Max size is 500MB per file.`,
                variant: "destructive"
            });
        }
    }, [setFilesToProcess, toast]);

    // Native drag and drop handlers
    const handleDragOver = useCallback((e) => {
        e.preventDefault();
        e.stopPropagation();
        setIsDragOver(true);
    }, []);

    const handleDragLeave = useCallback((e) => {
        e.preventDefault();
        e.stopPropagation();
        setIsDragOver(false);
    }, []);

    const handleDrop = useCallback((e) => {
        e.preventDefault();
        e.stopPropagation();
        setIsDragOver(false);

        const files = Array.from(e.dataTransfer.files);
        handleFiles(files);
    }, [handleFiles]); // Now `handleFiles` is memoized and correctly added as a dependency

    const handleFileInput = (e) => {
        const files = Array.from(e.target.files);
        handleFiles(files);
    };

    const removeFile = (id) => {
        setFilesToProcess(prev => prev.filter(f => f.id !== id));
    };

    const processQueue = async () => {
        if (!selectedCase || !selectedCollection) {
            toast({
                title: "Selection Required",
                description: "Please select a case and collection first.",
                variant: "destructive"
            });
            return;
        }

        setIsProcessing(true);
        setPlatformError(null); // Clear any previous platform errors
        const queuedFiles = filesToProcess.filter(f => f.status === 'queued');
        
        // Process files with improved error handling and better progress tracking
        for (let i = 0; i < queuedFiles.length; i++) {
            const fileWrapper = queuedFiles[i];
            
            try {
                // Step 1: Upload (10% progress)
                setFilesToProcess(prev => prev.map(f => 
                    f.id === fileWrapper.id ? { ...f, status: 'uploading', progress: 10 } : f
                ));
                
                const uploadResult = await UploadFile({ file: fileWrapper.file });
                
                // Step 2: Upload complete (30% progress)
                setFilesToProcess(prev => prev.map(f => 
                    f.id === fileWrapper.id ? { ...f, status: 'analyzing', progress: 30 } : f
                ));
                
                // Step 3: Start AI processing with shorter timeout and better error handling
                setFilesToProcess(prev => prev.map(f => 
                    f.id === fileWrapper.id ? { ...f, progress: 50 } : f
                ));

                let response;
                try {
                    // Try AI processing with 60 second timeout
                    response = await Promise.race([
                        universalEvidenceProcessor({
                            file_url: uploadResult.file_url,
                            file_type: fileWrapper.file.type,
                            file_name: fileWrapper.file.name,
                            case_context: cases.find(c => c.id === selectedCase)?.case_name || 'Legal Case',
                            user_notes: notes,
                        }),
                        new Promise((_, reject) => 
                            setTimeout(() => reject(new Error('AI processing timeout')), 60000)
                        )
                    ]);
                } catch (aiError) {
                    console.log("AI processing failed:", aiError);
                    
                    // Check for platform subscription error specifically
                    const errorMessage = aiError.message || '';
                    const errorDetail = aiError.response?.data?.detail || aiError.response?.data?.message || '';
                    
                    if ((errorDetail && (errorDetail.includes('Functions are blocked') || errorDetail.includes('subscription tier is too low'))) || 
                        (errorMessage && (errorMessage.includes('Functions are blocked') || errorMessage.includes('subscription tier is too low')))) {
                        
                        setPlatformError({
                            type: 'subscription',
                            message: "AI document processing requires backend functions, which are disabled on the current Base44 platform plan.",
                            solution: "The app owner must upgrade their Base44 platform subscription to a plan that includes backend function support."
                        });
                        
                        // Stop processing queue since this will affect all files
                        setIsProcessing(false);
                        return;
                    }
                    
                    // Fallback processing - just store the file without AI analysis
                    response = {
                        data: {
                            analysisResult: {
                                summary: `File "${fileWrapper.file.name}" uploaded successfully. AI analysis was unavailable, but the file has been stored securely for manual review.`,
                                key_findings: ["File uploaded and stored", "Manual review recommended"],
                                processing_note: `AI analysis failed: ${aiError.message}`
                            },
                            analysisStatus: 'stored',
                            processingLog: `File uploaded successfully. AI processing failed: ${aiError.message}`
                        }
                    };
                }

                // Step 4: AI processing complete (75% progress)
                setFilesToProcess(prev => prev.map(f => 
                    f.id === fileWrapper.id ? { ...f, progress: 75 } : f
                ));

                // Step 5: Save to database
                const newDoc = await AnalyzedDocument.create({
                    document_name: fileWrapper.file.name,
                    file_url: uploadResult.file_url,
                    file_type: fileWrapper.file.type,
                    file_size: fileWrapper.file.size,
                    file_category: fileWrapper.category,
                    collection_id: selectedCollection,
                    analysis_status: response.data?.analysisStatus || 'stored',
                    analysis_summary: response.data?.analysisResult?.summary || 'File processed successfully',
                    analysis_result: response.data?.analysisResult || {},
                    processing_log: response.data?.processingLog || 'Processing completed',
                    notes: notes,
                });

                // Add to results and mark complete (100% progress)
                setAnalysisResults(prev => [{
                    ...newDoc, 
                    ...response.data?.analysisResult,
                    document_name: fileWrapper.file.name
                }, ...prev]);
                
                setFilesToProcess(prev => prev.map(f => 
                    f.id === fileWrapper.id ? { ...f, status: 'complete', progress: 100 } : f
                ));

                // Success notification
                toast({
                    title: "File Processed",
                    description: `${fileWrapper.file.name} processed successfully${response.data?.analysisStatus === 'stored' ? ' (stored without AI analysis)' : ''}`,
                });

            } catch (err) {
                console.error("Complete processing error for file:", fileWrapper.file.name, err);
                
                // Update status to error with detailed message
                let errorMessage = err.message;
                if (err.message?.includes('Network Error')) {
                    errorMessage = 'Network connection failed';
                } else if (err.message?.includes('timeout')) {
                    errorMessage = 'Processing took too long';
                } else if (err.message?.includes('Unauthorized')) {
                    errorMessage = 'Authentication error';
                }
                
                setFilesToProcess(prev => prev.map(f => 
                    f.id === fileWrapper.id ? { 
                        ...f, 
                        status: 'error', 
                        error: errorMessage,
                        progress: 0
                    } : f
                ));

                // Error notification
                toast({
                    title: "Processing Failed",
                    description: `${fileWrapper.file.name}: ${errorMessage}`,
                    variant: "destructive"
                });
            }
            
            // Small delay between files to prevent overwhelming the system
            if (i < queuedFiles.length - 1) {
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
        }

        setIsProcessing(false);
        
        const successCount = filesToProcess.filter(f => f.status === 'complete').length;
        const errorCount = filesToProcess.filter(f => f.status === 'error').length;
        
        toast({
            title: "Processing Complete",
            description: `${successCount} files processed successfully${errorCount > 0 ? `, ${errorCount} failed` : ''}`,
        });
    };

    const filteredCollections = collections.filter(c => c.case_id === selectedCase);
    
    return (
        <div className="min-h-screen bg-slate-50 p-6">
            <div className="max-w-7xl mx-auto space-y-8">
                <div className="text-center">
                    <div className="w-16 h-16 bg-gradient-to-br from-teal-500 to-teal-600 rounded-xl flex items-center justify-center mx-auto mb-4">
                        <ScanText className="w-8 h-8 text-white" />
                    </div>
                    <h1 className="text-3xl font-bold text-slate-900 mb-2">Universal Evidence Processor</h1>
                    <p className="text-slate-600">Securely upload, analyze, and manage all forms of digital evidence with AI.</p>
                </div>

                {/* Platform Error Alert */}
                {platformError && (
                    <Alert variant="destructive" className="mb-8">
                        <AlertTriangle className="h-5 w-5" />
                        <AlertTitle>Platform Subscription Required</AlertTitle>
                        <AlertDescription className="mt-2">
                            <p className="mb-3">{platformError.message}</p>
                            <p className="mb-4 text-sm">{platformError.solution}</p>
                            
                            <div className="flex flex-col sm:flex-row gap-3">
                                <Button 
                                    variant="outline" 
                                    size="sm"
                                    onClick={() => window.open('https://base44.com/dashboard', '_blank')}
                                    className="flex items-center gap-2 bg-yellow-400 hover:bg-yellow-500 text-black border-yellow-500"
                                >
                                    <Crown className="w-4 h-4" />
                                    Upgrade Base44 Platform Plan
                                    <ExternalLink className="w-3 h-3" />
                                </Button>
                                <Button 
                                    variant="outline" 
                                    size="sm"
                                    onClick={() => setPlatformError(null)}
                                >
                                    Dismiss
                                </Button>
                            </div>
                        </AlertDescription>
                    </Alert>
                )}

                <SubscriptionGate feature="document_analysis">
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                        {/* Left Column: Upload & Config */}
                        <div className="space-y-6">
                            <Card>
                                <CardHeader>
                                    <CardTitle>Step 1: Select Case & Collection</CardTitle>
                                </CardHeader>
                                <CardContent className="space-y-4">
                                     <div>
                                        <Label>Case</Label>
                                        <select 
                                            value={selectedCase} 
                                            onChange={(e) => setSelectedCase(e.target.value)}
                                            className="w-full p-2 border border-slate-300 rounded-md"
                                        >
                                            <option value="">Select a Case</option>
                                            {cases.map(c => <option key={c.id} value={c.id}>{c.case_name}</option>)}
                                        </select>
                                    </div>
                                    <div>
                                        <Label>Collection</Label>
                                        <select 
                                            value={selectedCollection} 
                                            onChange={(e) => setSelectedCollection(e.target.value)} 
                                            disabled={!selectedCase}
                                            className="w-full p-2 border border-slate-300 rounded-md disabled:bg-slate-100"
                                        >
                                            <option value="">Select a Collection</option>
                                            {filteredCollections.map(c => <option key={c.id} value={c.id}>{c.collection_name}</option>)}
                                        </select>
                                    </div>
                                </CardContent>
                            </Card>

                            <Card>
                                <CardHeader>
                                    <CardTitle>Step 2: Upload Evidence</CardTitle>
                                </CardHeader>
                                <CardContent>
                                    <div 
                                        onDragOver={handleDragOver}
                                        onDragLeave={handleDragLeave}
                                        onDrop={handleDrop}
                                        className={`p-8 border-2 border-dashed rounded-lg text-center cursor-pointer transition-colors ${
                                            isDragOver ? 'border-blue-600 bg-blue-50' : 'border-slate-300 hover:border-slate-400'
                                        }`}
                                    >
                                        <input 
                                            type="file"
                                            multiple
                                            onChange={handleFileInput}
                                            className="hidden"
                                            id="file-upload"
                                        />
                                        <label htmlFor="file-upload" className="cursor-pointer">
                                            <Upload className="w-12 h-12 text-slate-400 mx-auto mb-4" />
                                            <p className="text-slate-600">Drag & drop files here, or click to select</p>
                                            <p className="text-xs text-slate-500 mt-2">Supports documents, images, audio, video, and archives up to 500MB.</p>
                                        </label>
                                    </div>
                                </CardContent>
                            </Card>

                            {filesToProcess.length > 0 && (
                                <Card>
                                    <CardHeader>
                                        <CardTitle>Processing Queue ({filesToProcess.filter(f=>f.status==='queued').length})</CardTitle>
                                    </CardHeader>
                                    <CardContent className="space-y-3">
                                        {filesToProcess.map(fw => (
                                            <div key={fw.id} className="p-3 bg-slate-50 rounded-lg flex items-center gap-4">
                                                <FileIcon category={fw.category} />
                                                <div className="flex-1">
                                                    <p className="text-sm font-medium truncate">{fw.file.name}</p>
                                                    <div className="flex items-center gap-2 text-xs text-slate-500">
                                                        <span>{(fw.file.size / 1024 / 1024).toFixed(2)} MB</span>
                                                        <Badge variant={fw.status === 'error' ? 'destructive' : 'secondary'}>
                                                            {fw.status}
                                                        </Badge>
                                                        {fw.error && <span className="text-red-600">{fw.error}</span>}
                                                    </div>
                                                    {fw.progress > 0 && fw.progress < 100 && (
                                                        <Progress value={fw.progress} className="mt-2 h-2" />
                                                    )}
                                                </div>
                                                <Button variant="ghost" size="sm" onClick={() => removeFile(fw.id)}>
                                                    <X className="w-4 h-4" />
                                                </Button>
                                            </div>
                                        ))}
                                        
                                        <div className="pt-4">
                                            <Label>Case Notes (Optional)</Label>
                                            <Textarea 
                                                value={notes}
                                                onChange={(e) => setNotes(e.target.value)}
                                                placeholder="Add context about these files..."
                                                className="mt-2"
                                            />
                                        </div>
                                        
                                        <Button 
                                            onClick={processQueue} 
                                            disabled={isProcessing || !selectedCase || !selectedCollection || filesToProcess.filter(f=>f.status==='queued').length === 0} 
                                            className="w-full"
                                        >
                                            {isProcessing ? (
                                                <>
                                                    <Loader2 className="w-4 h-4 animate-spin mr-2"/>
                                                    Processing...
                                                </>
                                            ) : (
                                                `Process ${filesToProcess.filter(f=>f.status==='queued').length} Files`
                                            )}
                                        </Button>
                                    </CardContent>
                                </Card>
                            )}
                        </div>

                        {/* Right Column: Results */}
                        <div className="space-y-6">
                             {analysisResults.length === 0 && !isProcessing && (
                                <Card>
                                    <CardContent className="p-12 text-center">
                                        <ScanText className="w-16 h-16 text-slate-400 mx-auto mb-4" />
                                        <h3 className="text-lg font-semibold text-slate-900 mb-2">Awaiting Evidence</h3>
                                        <p className="text-slate-600">Upload files to begin AI-powered analysis.</p>
                                    </CardContent>
                                </Card>
                            )}
                            {analysisResults.map((result, index) => (
                                <Card key={index}>
                                    <CardHeader>
                                        <CardTitle className="flex items-center gap-2">
                                            <CheckCircle className="w-5 h-5 text-green-600"/>
                                            {result.document_name}
                                        </CardTitle>
                                    </CardHeader>
                                    <CardContent>
                                        <p className="text-sm text-slate-700 mb-3">
                                            {result.summary || result.description || result.analysis_summary}
                                        </p>
                                        {result.key_findings && result.key_findings.length > 0 && (
                                            <div className="space-y-2 mb-4">
                                                <h4 className="font-medium text-slate-900">Key Findings:</h4>
                                                <ul className="text-sm text-slate-700 list-disc pl-5">
                                                    {result.key_findings.map((finding, i) => (
                                                        <li key={i}>{finding}</li>
                                                    ))}
                                                </ul>
                                            </div>
                                        )}
                                        {result.full_text && (
                                            <div>
                                                <h4 className="font-medium text-slate-900 mb-2">Full Transcription:</h4>
                                                <pre className="text-xs text-slate-600 bg-slate-50 p-3 rounded-md whitespace-pre-wrap max-h-48 overflow-y-auto">
                                                    {result.full_text}
                                                </pre>
                                            </div>
                                        )}
                                    </CardContent>
                                </Card>
                            ))}
                        </div>
                    </div>
                </SubscriptionGate>
            </div>
        </div>
    );
}
